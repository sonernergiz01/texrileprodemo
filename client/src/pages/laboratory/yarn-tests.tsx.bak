import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

import PageHeader from "@/components/layout/page-header";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { 
  Loader2, 
  Search, 
  Plus, 
  Edit, 
  Eye,
  FileText,
  Calendar,
  Download,
  Upload,
  Trash2,
  Filter,
  ChevronDown,
  MoreHorizontal
} from "lucide-react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

// İplik test şeması
const yarnTestSchema = z.object({
  testId: z.string().min(1, "Test ID gereklidir"),
  sampleId: z.string().optional(),
  orderId: z.number().optional(),
  testType: z.enum([
    "Mukavemet Testi", 
    "Büküm Testi", 
    "Düzgünsüzlük Testi",
    "Elastikiyet Testi",
    "Nem Testi",
    "Kopma Uzaması Testi",
    "Çap Testi",
    "Diğer"
  ]),
  testDate: z.string().min(1, "Test tarihi gereklidir"),
  yarnType: z.string().min(1, "İplik tipi gereklidir"),
  yarnCount: z.string().min(1, "İplik numarası gereklidir"),
  testMethod: z.string().min(1, "Test metodu gereklidir"),
  testResult: z.string().optional(),
  status: z.enum(["Beklemede", "Test Ediliyor", "Tamamlandı", "İptal Edildi"]).default("Beklemede"),
  technician: z.string().optional(),
  device: z.string().optional(),
  notes: z.string().optional(),
});

const YarnTestsPage = () => {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState<string | null>(null);
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [selectedTest, setSelectedTest] = useState<any>(null);
  const [testTypeFilter, setTestTypeFilter] = useState<string | null>(null);

  // Form tanımlama
  const form = useForm<z.infer<typeof yarnTestSchema>>({
    resolver: zodResolver(yarnTestSchema),
    defaultValues: {
      testId: "",
      sampleId: "",
      orderId: undefined,
      testType: "Mukavemet Testi",
      testDate: new Date().toISOString().split('T')[0],
      yarnType: "",
      yarnCount: "",
      testMethod: "",
      testResult: "",
      status: "Beklemede",
      technician: "",
      device: "",
      notes: "",
    },
  });

  // Düzenleme formu
  const editForm = useForm<z.infer<typeof yarnTestSchema>>({
    resolver: zodResolver(yarnTestSchema),
    defaultValues: {
      testId: "",
      sampleId: "",
      orderId: undefined,
      testType: "Mukavemet Testi",
      testDate: "",
      yarnType: "",
      yarnCount: "",
      testMethod: "",
      testResult: "",
      status: "Beklemede",
      technician: "",
      device: "",
      notes: "",
    },
  });

  // İplik testleri verisini çek
  const { data: yarnTests = [], isLoading: isLoadingYarnTests } = useQuery({
    queryKey: ["/api/laboratory/yarn-tests"],
  });

  // Sipariş verisini çek
  const { data: orders = [] } = useQuery({
    queryKey: ["/api/sales/orders"],
  });

  // Numune verisini çek
  const { data: samples = [] } = useQuery({
    queryKey: ["/api/samples/tracking"],
  });

  // Yeni iplik testi oluştur
  const createYarnTestMutation = useMutation({
    mutationFn: async (data: z.infer<typeof yarnTestSchema>) => {
      const res = await apiRequest("POST", "/api/laboratory/yarn-tests", data);
      return await res.json();
    },
    onSuccess: () => {
      toast({
        title: "Başarılı",
        description: "İplik testi başarıyla oluşturuldu",
      });
      setIsCreateDialogOpen(false);
      queryClient.invalidateQueries({ queryKey: ["/api/laboratory/yarn-tests"] });
      form.reset();
    },
    onError: (error: any) => {
      toast({
        title: "Hata",
        description: error.message || "İplik testi oluşturulurken bir hata meydana geldi",
        variant: "destructive",
      });
    },
  });

  // İplik testi güncelle
  const updateYarnTestMutation = useMutation({
    mutationFn: async (data: any) => {
      const res = await apiRequest("PUT", `/api/laboratory/yarn-tests/${selectedTest.id}`, data);
      return await res.json();
    },
    onSuccess: () => {
      toast({
        title: "Başarılı",
        description: "İplik testi başarıyla güncellendi",
      });
      setIsEditDialogOpen(false);
      queryClient.invalidateQueries({ queryKey: ["/api/laboratory/yarn-tests"] });
    },
    onError: (error: any) => {
      toast({
        title: "Hata",
        description: error.message || "İplik testi güncellenirken bir hata meydana geldi",
        variant: "destructive",
      });
    },
  });

  // İplik testi sil
  const deleteYarnTestMutation = useMutation({
    mutationFn: async (id: number) => {
      const res = await apiRequest("DELETE", `/api/laboratory/yarn-tests/${id}`);
      return await res.json();
    },
    onSuccess: () => {
      toast({
        title: "Başarılı",
        description: "İplik testi başarıyla silindi",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/laboratory/yarn-tests"] });
    },
    onError: (error: any) => {
      toast({
        title: "Hata",
        description: error.message || "İplik testi silinirken bir hata meydana geldi",
        variant: "destructive",
      });
    },
  });

  // Form gönderme
  const onSubmit = (data: z.infer<typeof yarnTestSchema>) => {
    createYarnTestMutation.mutate(data);
  };

  // Form güncelleme
  const onEditSubmit = (data: z.infer<typeof yarnTestSchema>) => {
    updateYarnTestMutation.mutate(data);
  };

  // İplik testini görüntüleme
  const handleViewTest = (test: any) => {
    setSelectedTest(test);
    setIsViewDialogOpen(true);
  };

  // İplik testini düzenleme
  const handleEditTest = (test: any) => {
    setSelectedTest(test);
    editForm.reset({
      testId: test.testId,
      sampleId: test.sampleId || "",
      orderId: test.orderId,
      testType: test.testType,
      testDate: test.testDate,
      yarnType: test.yarnType,
      yarnCount: test.yarnCount,
      testMethod: test.testMethod,
      testResult: test.testResult || "",
      status: test.status,
      technician: test.technician || "",
      device: test.device || "",
      notes: test.notes || "",
    });
    setIsEditDialogOpen(true);
  };

  // İplik testini silme
  const handleDeleteTest = (test: any) => {
    if (window.confirm("Bu iplik testini silmek istediğinizden emin misiniz?")) {
      deleteYarnTestMutation.mutate(test.id);
    }
  };

  // Filtreleme
  const getFilteredTests = () => {
    let filtered = yarnTests;
    
    // Arama terimine göre filtrele
    if (searchTerm) {
      const searchLower = searchTerm.toLowerCase();
      filtered = filtered.filter((test: any) => 
        test.testId?.toLowerCase().includes(searchLower) ||
        test.yarnType?.toLowerCase().includes(searchLower) ||
        test.technician?.toLowerCase().includes(searchLower) ||
        test.testMethod?.toLowerCase().includes(searchLower)
      );
    }
    
    // Duruma göre filtrele
    if (statusFilter) {
      filtered = filtered.filter((test: any) => test.status === statusFilter);
    }
    
    // Test tipine göre filtrele
    if (testTypeFilter) {
      filtered = filtered.filter((test: any) => test.testType === testTypeFilter);
    }
    
    return filtered;
  };

  // Sipariş no alma
  const getOrderNumber = (orderId?: number) => {
    if (!orderId) return "-";
    const order = orders.find((o: any) => o.id === orderId);
    return order ? order.orderNumber : "-";
  };

  // Numune ID alma
  const getSampleId = (sampleId?: string) => {
    if (!sampleId) return "-";
    return sampleId;
  };

  // Durum rozeti renkleri
  const getStatusBadgeVariant = (status: string) => {
    switch (status) {
      case "Beklemede":
        return "outline";
      case "Test Ediliyor":
        return "default";
      case "Tamamlandı":
        return "success";
      case "İptal Edildi":
        return "destructive";
      default:
        return "outline";
    }
  };

  // Yükleme durumu
  if (isLoadingYarnTests) {
    return (
      <div className="flex items-center justify-center h-full">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }

  // Filtrelenmiş iplik testleri
  const filteredTests = getFilteredTests();

  return (
    <div className="space-y-6">
      <PageHeader 
        title="İplik Laboratuvarı" 
        description="İplik test ve analiz sonuçlarını yönetin"
      />
      
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-4">
        <div className="flex flex-wrap gap-2">
          <Button 
            variant={statusFilter === null ? "default" : "outline"} 
            onClick={() => setStatusFilter(null)}
          >
            Tümü
          </Button>
          <Button 
            variant={statusFilter === "Beklemede" ? "default" : "outline"} 
            onClick={() => setStatusFilter("Beklemede")}
          >
            Beklemede
          </Button>
          <Button 
            variant={statusFilter === "Test Ediliyor" ? "default" : "outline"} 
            onClick={() => setStatusFilter("Test Ediliyor")}
          >
            Test Ediliyor
          </Button>
          <Button 
            variant={statusFilter === "Tamamlandı" ? "default" : "outline"} 
            onClick={() => setStatusFilter("Tamamlandı")}
          >
            Tamamlandı
          </Button>
        </div>
          
        <div className="flex gap-2">
          <div className="relative w-full sm:w-64">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input
              type="search"
              placeholder="Test ID, iplik tipi, teknisyen..."
              className="pl-8 w-full"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline">
                <Filter className="h-4 w-4 mr-2" />
                Filtrele
                <ChevronDown className="h-4 w-4 ml-2" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
              <DropdownMenuLabel>Test Tipi</DropdownMenuLabel>
              <DropdownMenuItem onClick={() => setTestTypeFilter(null)}>
                Tümü
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setTestTypeFilter("Mukavemet Testi")}>
                Mukavemet Testi
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setTestTypeFilter("Büküm Testi")}>
                Büküm Testi
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setTestTypeFilter("Düzgünsüzlük Testi")}>
                Düzgünsüzlük Testi
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setTestTypeFilter("Elastikiyet Testi")}>
                Elastikiyet Testi
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setTestTypeFilter("Nem Testi")}>
                Nem Testi
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
          
          <Button onClick={() => setIsCreateDialogOpen(true)}>
            <Plus className="h-4 w-4 mr-2" /> Yeni Test
          </Button>
        </div>
      </div>
      
      <Card>
        <CardHeader>
          <CardTitle>İplik Test Sonuçları</CardTitle>
          <CardDescription>
            Laboratuvarda gerçekleştirilen iplik testleri ve sonuçları
          </CardDescription>
        </CardHeader>
        <CardContent>
          {filteredTests.length === 0 ? (
            <div className="text-center py-8 text-muted-foreground">
              {searchTerm || statusFilter || testTypeFilter ? 
                "Arama kriterlerine uygun iplik testi bulunamadı." : 
                "Henüz iplik testi bulunmamaktadır. Yeni bir test eklemek için 'Yeni Test' butonunu kullanın."
              }
            </div>
          ) : (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Test ID</TableHead>
                  <TableHead>İplik Tipi</TableHead>
                  <TableHead>İplik No</TableHead>
                  <TableHead>Test Tipi</TableHead>
                  <TableHead>Test Tarihi</TableHead>
                  <TableHead>Referans</TableHead>
                  <TableHead>Durum</TableHead>
                  <TableHead className="text-right">İşlemler</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredTests.map((test: any) => (
                  <TableRow key={test.id}>
                    <TableCell className="font-medium">{test.testId}</TableCell>
                    <TableCell>{test.yarnType}</TableCell>
                    <TableCell>{test.yarnCount}</TableCell>
                    <TableCell>{test.testType}</TableCell>
                    <TableCell>{test.testDate}</TableCell>
                    <TableCell>
                      {test.orderId ? (
                        <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                          Sipariş: {getOrderNumber(test.orderId)}
                        </span>
                      ) : test.sampleId ? (
                        <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">
                          Numune: {getSampleId(test.sampleId)}
                        </span>
                      ) : (
                        "-"
                      )}
                    </TableCell>
                    <TableCell>
                      <Badge variant={getStatusBadgeVariant(test.status)}>
                        {test.status}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-right">
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" className="h-8 w-8 p-0">
                            <span className="sr-only">Menüyü aç</span>
                            <MoreHorizontal className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuLabel>İşlemler</DropdownMenuLabel>
                          <DropdownMenuItem onClick={() => handleViewTest(test)}>
                            <Eye className="h-4 w-4 mr-2" />
                            Görüntüle
                          </DropdownMenuItem>
                          <DropdownMenuItem onClick={() => handleEditTest(test)}>
                            <Edit className="h-4 w-4 mr-2" />
                            Düzenle
                          </DropdownMenuItem>
                          <DropdownMenuSeparator />
                          <DropdownMenuItem onClick={() => {}}>
                            <FileText className="h-4 w-4 mr-2" />
                            Rapor Oluştur
                          </DropdownMenuItem>
                          <DropdownMenuItem onClick={() => {}}>
                            <Download className="h-4 w-4 mr-2" />
                            Dışa Aktar
                          </DropdownMenuItem>
                          <DropdownMenuSeparator />
                          <DropdownMenuItem
                            onClick={() => handleDeleteTest(test)}
                            className="text-red-600"
                          >
                            <Trash2 className="h-4 w-4 mr-2" />
                            Sil
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          )}
        </CardContent>
      </Card>
      
      {/* Yeni İplik Testi Modalı */}
      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>Yeni İplik Testi</DialogTitle>
            <DialogDescription>
              Yeni bir iplik testi kaydı oluşturun.
            </DialogDescription>
          </DialogHeader>
          
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <div className="grid grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="testId"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Test ID*</FormLabel>
                      <FormControl>
                        <Input placeholder="ör: YRN-TEST-2025-001" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="testDate"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Test Tarihi*</FormLabel>
                      <FormControl>
                        <Input type="date" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="testType"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Test Tipi*</FormLabel>
                      <Select 
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Test tipi seçin" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="Mukavemet Testi">Mukavemet Testi</SelectItem>
                          <SelectItem value="Büküm Testi">Büküm Testi</SelectItem>
                          <SelectItem value="Düzgünsüzlük Testi">Düzgünsüzlük Testi</SelectItem>
                          <SelectItem value="Elastikiyet Testi">Elastikiyet Testi</SelectItem>
                          <SelectItem value="Nem Testi">Nem Testi</SelectItem>
                          <SelectItem value="Kopma Uzaması Testi">Kopma Uzaması Testi</SelectItem>
                          <SelectItem value="Çap Testi">Çap Testi</SelectItem>
                          <SelectItem value="Diğer">Diğer</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="testMethod"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Test Metodu*</FormLabel>
                      <FormControl>
                        <Input placeholder="ör: ISO 2062" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="yarnType"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>İplik Tipi*</FormLabel>
                      <FormControl>
                        <Input placeholder="ör: Pamuk" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="yarnCount"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>İplik Numarası*</FormLabel>
                      <FormControl>
                        <Input placeholder="ör: Ne 30/1" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="orderId"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Sipariş</FormLabel>
                      <Select 
                        onValueChange={(value) => field.onChange(value ? parseInt(value) : undefined)}
                        defaultValue={field.value?.toString()}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Sipariş seçin (opsiyonel)" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="">Seçiniz</SelectItem>
                          {orders.map((order: any) => (
                            <SelectItem key={order.id} value={order.id.toString()}>
                              {order.orderNumber}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="sampleId"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Numune ID</FormLabel>
                      <Select 
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Numune seçin (opsiyonel)" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="">Seçiniz</SelectItem>
                          {samples.map((sample: any) => (
                            <SelectItem key={sample.id} value={sample.sampleId}>
                              {sample.sampleId}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="technician"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Teknisyen</FormLabel>
                      <FormControl>
                        <Input {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="device"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Cihaz</FormLabel>
                      <FormControl>
                        <Input placeholder="ör: Uster Tester 6" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              
              <FormField
                control={form.control}
                name="testResult"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Test Sonucu</FormLabel>
                    <FormControl>
                      <Textarea 
                        placeholder="Test sonuçlarını detaylı olarak girebilirsiniz..."
                        className="resize-none"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="status"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Durum*</FormLabel>
                    <Select 
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Durum seçin" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="Beklemede">Beklemede</SelectItem>
                        <SelectItem value="Test Ediliyor">Test Ediliyor</SelectItem>
                        <SelectItem value="Tamamlandı">Tamamlandı</SelectItem>
                        <SelectItem value="İptal Edildi">İptal Edildi</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="notes"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Notlar</FormLabel>
                    <FormControl>
                      <Textarea 
                        placeholder="Test ile ilgili ek notlar..."
                        className="resize-none"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <DialogFooter>
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => setIsCreateDialogOpen(false)}
                >
                  İptal
                </Button>
                <Button 
                  type="submit"
                  disabled={createYarnTestMutation.isPending}
                >
                  {createYarnTestMutation.isPending && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Oluştur
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
      
      {/* İplik Testi Düzenleme Modalı */}
      {selectedTest && (
        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
          <DialogContent className="sm:max-w-[600px]">
            <DialogHeader>
              <DialogTitle>İplik Testi Düzenle</DialogTitle>
              <DialogDescription>
                {selectedTest.testId} numaralı testi düzenleyin.
              </DialogDescription>
            </DialogHeader>
            
            <Form {...editForm}>
              <form onSubmit={editForm.handleSubmit(onEditSubmit)} className="space-y-6">
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={editForm.control}
                    name="testId"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Test ID*</FormLabel>
                        <FormControl>
                          <Input {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={editForm.control}
                    name="testDate"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Test Tarihi*</FormLabel>
                        <FormControl>
                          <Input type="date" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={editForm.control}
                    name="testType"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Test Tipi*</FormLabel>
                        <Select 
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Test tipi seçin" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="Mukavemet Testi">Mukavemet Testi</SelectItem>
                            <SelectItem value="Büküm Testi">Büküm Testi</SelectItem>
                            <SelectItem value="Düzgünsüzlük Testi">Düzgünsüzlük Testi</SelectItem>
                            <SelectItem value="Elastikiyet Testi">Elastikiyet Testi</SelectItem>
                            <SelectItem value="Nem Testi">Nem Testi</SelectItem>
                            <SelectItem value="Kopma Uzaması Testi">Kopma Uzaması Testi</SelectItem>
                            <SelectItem value="Çap Testi">Çap Testi</SelectItem>
                            <SelectItem value="Diğer">Diğer</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={editForm.control}
                    name="testMethod"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Test Metodu*</FormLabel>
                        <FormControl>
                          <Input {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={editForm.control}
                    name="yarnType"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>İplik Tipi*</FormLabel>
                        <FormControl>
                          <Input {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={editForm.control}
                    name="yarnCount"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>İplik Numarası*</FormLabel>
                        <FormControl>
                          <Input {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={editForm.control}
                    name="orderId"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Sipariş</FormLabel>
                        <Select 
                          onValueChange={(value) => field.onChange(value ? parseInt(value) : undefined)}
                          defaultValue={field.value?.toString() || ""}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Sipariş seçin (opsiyonel)" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="">Seçiniz</SelectItem>
                            {orders.map((order: any) => (
                              <SelectItem key={order.id} value={order.id.toString()}>
                                {order.orderNumber}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={editForm.control}
                    name="sampleId"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Numune ID</FormLabel>
                        <Select 
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Numune seçin (opsiyonel)" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="">Seçiniz</SelectItem>
                            {samples.map((sample: any) => (
                              <SelectItem key={sample.id} value={sample.sampleId}>
                                {sample.sampleId}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={editForm.control}
                    name="technician"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Teknisyen</FormLabel>
                        <FormControl>
                          <Input {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={editForm.control}
                    name="device"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Cihaz</FormLabel>
                        <FormControl>
                          <Input {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                
                <FormField
                  control={editForm.control}
                  name="testResult"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Test Sonucu</FormLabel>
                      <FormControl>
                        <Textarea 
                          className="resize-none"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={editForm.control}
                  name="status"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Durum*</FormLabel>
                      <Select 
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Durum seçin" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="Beklemede">Beklemede</SelectItem>
                          <SelectItem value="Test Ediliyor">Test Ediliyor</SelectItem>
                          <SelectItem value="Tamamlandı">Tamamlandı</SelectItem>
                          <SelectItem value="İptal Edildi">İptal Edildi</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={editForm.control}
                  name="notes"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Notlar</FormLabel>
                      <FormControl>
                        <Textarea 
                          className="resize-none"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <DialogFooter>
                  <Button 
                    type="button" 
                    variant="outline" 
                    onClick={() => setIsEditDialogOpen(false)}
                  >
                    İptal
                  </Button>
                  <Button 
                    type="submit"
                    disabled={updateYarnTestMutation.isPending}
                  >
                    {updateYarnTestMutation.isPending && (
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    )}
                    Güncelle
                  </Button>
                </DialogFooter>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
      )}
      
      {/* İplik Testi Görüntüleme Modalı */}
      {selectedTest && (
        <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>
          <DialogContent className="sm:max-w-[600px]">
            <DialogHeader>
              <DialogTitle>İplik Testi Detayları</DialogTitle>
              <DialogDescription>
                {selectedTest.testId} - {selectedTest.testType}
              </DialogDescription>
            </DialogHeader>
            
            <div className="space-y-6">
              <div className="grid grid-cols-2 gap-6">
                <div>
                  <h4 className="text-sm font-medium mb-2">Test Bilgileri</h4>
                  <div className="space-y-2">
                    <div className="grid grid-cols-2">
                      <span className="text-sm text-muted-foreground">Test ID:</span>
                      <span className="text-sm font-medium">{selectedTest.testId}</span>
                    </div>
                    <div className="grid grid-cols-2">
                      <span className="text-sm text-muted-foreground">Test Tipi:</span>
                      <span className="text-sm font-medium">{selectedTest.testType}</span>
                    </div>
                    <div className="grid grid-cols-2">
                      <span className="text-sm text-muted-foreground">Test Metodu:</span>
                      <span className="text-sm font-medium">{selectedTest.testMethod}</span>
                    </div>
                    <div className="grid grid-cols-2">
                      <span className="text-sm text-muted-foreground">Test Tarihi:</span>
                      <span className="text-sm font-medium">{selectedTest.testDate}</span>
                    </div>
                    <div className="grid grid-cols-2">
                      <span className="text-sm text-muted-foreground">Durum:</span>
                      <Badge variant={getStatusBadgeVariant(selectedTest.status)}>
                        {selectedTest.status}
                      </Badge>
                    </div>
                  </div>
                </div>
                
                <div>
                  <h4 className="text-sm font-medium mb-2">İplik Bilgileri</h4>
                  <div className="space-y-2">
                    <div className="grid grid-cols-2">
                      <span className="text-sm text-muted-foreground">İplik Tipi:</span>
                      <span className="text-sm font-medium">{selectedTest.yarnType}</span>
                    </div>
                    <div className="grid grid-cols-2">
                      <span className="text-sm text-muted-foreground">İplik Numarası:</span>
                      <span className="text-sm font-medium">{selectedTest.yarnCount}</span>
                    </div>
                    {selectedTest.orderId && (
                      <div className="grid grid-cols-2">
                        <span className="text-sm text-muted-foreground">Sipariş No:</span>
                        <span className="text-sm font-medium">{getOrderNumber(selectedTest.orderId)}</span>
                      </div>
                    )}
                    {selectedTest.sampleId && (
                      <div className="grid grid-cols-2">
                        <span className="text-sm text-muted-foreground">Numune ID:</span>
                        <span className="text-sm font-medium">{selectedTest.sampleId}</span>
                      </div>
                    )}
                    {selectedTest.technician && (
                      <div className="grid grid-cols-2">
                        <span className="text-sm text-muted-foreground">Teknisyen:</span>
                        <span className="text-sm font-medium">{selectedTest.technician}</span>
                      </div>
                    )}
                    {selectedTest.device && (
                      <div className="grid grid-cols-2">
                        <span className="text-sm text-muted-foreground">Cihaz:</span>
                        <span className="text-sm font-medium">{selectedTest.device}</span>
                      </div>
                    )}
                  </div>
                </div>
              </div>
              
              {selectedTest.testResult && (
                <div>
                  <h4 className="text-sm font-medium mb-2">Test Sonucu</h4>
                  <div className="text-sm p-3 bg-muted rounded-md">
                    {selectedTest.testResult}
                  </div>
                </div>
              )}
              
              {selectedTest.notes && (
                <div>
                  <h4 className="text-sm font-medium mb-2">Notlar</h4>
                  <div className="text-sm p-3 bg-muted rounded-md">
                    {selectedTest.notes}
                  </div>
                </div>
              )}
              
              <DialogFooter>
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => setIsViewDialogOpen(false)}
                >
                  Kapat
                </Button>
                <Button
                  onClick={() => {
                    setIsViewDialogOpen(false);
                    setTimeout(() => {
                      handleEditTest(selectedTest);
                    }, 100);
                  }}
                >
                  <Edit className="mr-2 h-4 w-4" />
                  Düzenle
                </Button>
              </DialogFooter>
            </div>
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
};

export default YarnTestsPage;